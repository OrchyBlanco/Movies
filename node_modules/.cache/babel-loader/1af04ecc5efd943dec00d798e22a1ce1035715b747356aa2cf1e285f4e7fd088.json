{"ast":null,"code":"var _jsxFileName = \"C:\\\\Web Projects\\\\Movies\\\\Movies\\\\src\\\\components\\\\MoviesGrid.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { get } from \"../utils/httpCliente\";\nimport { MovieCard } from \"./MovieCard\";\nimport { Spinner } from \"./Spinner\";\nimport { Empty } from \"./Empty\";\nimport style from \"./style/MoviesGrid.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function MoviesGrid(_ref) {\n  _s();\n  let {\n    search\n  } = _ref;\n  //console.log(movies);\n\n  // Hook de react para devolver el array de peliculas\n  // const moviesState = useState([]);\n  //Variable donde guardaremos las Peliculas recibidas del Fetch\n  //const movies=moviesState[0];\n  //Funcion para poder acceder a las peliculas\n  // const setMovies = moviesState[1];\n\n  //Mismo codigo de las lineas 9 a 14\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [page, setPage] = useState(1);\n  const [hasMore, setHasMore] = useState(true); //Estado en el que comprobamos que tenemos + peliculas\n\n  //Solicitud asincrona a la API.\n  useEffect(() => {\n    setIsLoading(true);\n    const searchUrl = search ? \"/search/movie?query=\" + search + \"&page=\" + page : \"/discover/movie?page=\" + page;\n    get(searchUrl).then(data => {\n      setMovies(prevMovies => prevMovies.concat(data.results)); //Concatenamos las peliculas anteriores con las nuevas que recibimos\n      setHasMore(data.page < data.total_pages); // Si la pagina actual es menor que el total de paginas continual el INFINITE SCROLL\n      setIsLoading(false);\n    });\n  }, [search, page]); // !!IMPORTANTE!!! AÑADIR ARRAY PARA EVITAR BUCLES INFINITOS\n\n  if (!isLoading && movies.length === 0) {\n    return /*#__PURE__*/_jsxDEV(Empty, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n    dataLength: movies.length,\n    hasMore: hasMore,\n    next: () => setPage(prevPage => prevPage + 1),\n    loader: /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 15\n    }, this) //Añadimos el Spinner aqui para evitar que carge encima de las paginas\n    ,\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: style.MovieGrid,\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(MovieCard, {\n        movie: movie\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n_s(MoviesGrid, \"y2DWPaaYzGfiZYscA/VoRCZubr0=\");\n_c = MoviesGrid;\nvar _c;\n$RefreshReg$(_c, \"MoviesGrid\");","map":{"version":3,"names":["useEffect","useState","InfiniteScroll","get","MovieCard","Spinner","Empty","style","jsxDEV","_jsxDEV","MoviesGrid","_ref","_s","search","movies","setMovies","isLoading","setIsLoading","page","setPage","hasMore","setHasMore","searchUrl","then","data","prevMovies","concat","results","total_pages","length","fileName","_jsxFileName","lineNumber","columnNumber","dataLength","next","prevPage","loader","children","className","MovieGrid","map","movie","id","_c","$RefreshReg$"],"sources":["C:/Web Projects/Movies/Movies/src/components/MoviesGrid.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\n\r\nimport { get } from \"../utils/httpCliente\";\r\nimport { MovieCard } from \"./MovieCard\";\r\nimport { Spinner } from \"./Spinner\";\r\nimport { Empty } from \"./Empty\";\r\n\r\nimport style from \"./style/MoviesGrid.module.css\";\r\n\r\nexport function MoviesGrid({ search }) {\r\n  //console.log(movies);\r\n\r\n  // Hook de react para devolver el array de peliculas\r\n  // const moviesState = useState([]);\r\n  //Variable donde guardaremos las Peliculas recibidas del Fetch\r\n  //const movies=moviesState[0];\r\n  //Funcion para poder acceder a las peliculas\r\n  // const setMovies = moviesState[1];\r\n\r\n  //Mismo codigo de las lineas 9 a 14\r\n  const [movies, setMovies] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [page, setPage] = useState(1);\r\n  const [hasMore, setHasMore] = useState(true); //Estado en el que comprobamos que tenemos + peliculas\r\n\r\n  //Solicitud asincrona a la API.\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n\r\n    const searchUrl = search\r\n      ? \"/search/movie?query=\" + search + \"&page=\" + page\r\n      : \"/discover/movie?page=\" + page;\r\n\r\n    get(searchUrl).then((data) => {\r\n      setMovies((prevMovies) => prevMovies.concat(data.results)); //Concatenamos las peliculas anteriores con las nuevas que recibimos\r\n      setHasMore(data.page < data.total_pages); // Si la pagina actual es menor que el total de paginas continual el INFINITE SCROLL\r\n      setIsLoading(false);\r\n    });\r\n  }, [search, page]); // !!IMPORTANTE!!! AÑADIR ARRAY PARA EVITAR BUCLES INFINITOS\r\n\r\n  if (!isLoading && movies.length === 0) {\r\n    return <Empty />;\r\n  }\r\n\r\n  return (\r\n    <InfiniteScroll\r\n      dataLength={movies.length}\r\n      hasMore={hasMore}\r\n      next={() => setPage((prevPage) => prevPage + 1)}\r\n      loader={<Spinner />} //Añadimos el Spinner aqui para evitar que carge encima de las paginas\r\n    >\r\n      <ul className={style.MovieGrid}>\r\n        {movies.map((movie) => (\r\n          <MovieCard key={movie.id} movie={movie} />\r\n        ))}\r\n      </ul>\r\n    </InfiniteScroll>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,cAAc,MAAM,iCAAiC;AAE5D,SAASC,GAAG,QAAQ,sBAAsB;AAC1C,SAASC,SAAS,QAAQ,aAAa;AACvC,SAASC,OAAO,QAAQ,WAAW;AACnC,SAASC,KAAK,QAAQ,SAAS;AAE/B,OAAOC,KAAK,MAAM,+BAA+B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,OAAO,SAASC,UAAUA,CAAAC,IAAA,EAAa;EAAAC,EAAA;EAAA,IAAZ;IAAEC;EAAO,CAAC,GAAAF,IAAA;EACnC;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA,MAAM,CAACG,MAAM,EAAEC,SAAS,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACe,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACiB,IAAI,EAAEC,OAAO,CAAC,GAAGlB,QAAQ,CAAC,CAAC,CAAC;EACnC,MAAM,CAACmB,OAAO,EAAEC,UAAU,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE9C;EACAD,SAAS,CAAC,MAAM;IACdiB,YAAY,CAAC,IAAI,CAAC;IAElB,MAAMK,SAAS,GAAGT,MAAM,GACpB,sBAAsB,GAAGA,MAAM,GAAG,QAAQ,GAAGK,IAAI,GACjD,uBAAuB,GAAGA,IAAI;IAElCf,GAAG,CAACmB,SAAS,CAAC,CAACC,IAAI,CAAEC,IAAI,IAAK;MAC5BT,SAAS,CAAEU,UAAU,IAAKA,UAAU,CAACC,MAAM,CAACF,IAAI,CAACG,OAAO,CAAC,CAAC,CAAC,CAAC;MAC5DN,UAAU,CAACG,IAAI,CAACN,IAAI,GAAGM,IAAI,CAACI,WAAW,CAAC,CAAC,CAAC;MAC1CX,YAAY,CAAC,KAAK,CAAC;IACrB,CAAC,CAAC;EACJ,CAAC,EAAE,CAACJ,MAAM,EAAEK,IAAI,CAAC,CAAC,CAAC,CAAC;;EAEpB,IAAI,CAACF,SAAS,IAAIF,MAAM,CAACe,MAAM,KAAK,CAAC,EAAE;IACrC,oBAAOpB,OAAA,CAACH,KAAK;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG;EAClB;EAEA,oBACExB,OAAA,CAACP,cAAc;IACbgC,UAAU,EAAEpB,MAAM,CAACe,MAAO;IAC1BT,OAAO,EAAEA,OAAQ;IACjBe,IAAI,EAAEA,CAAA,KAAMhB,OAAO,CAAEiB,QAAQ,IAAKA,QAAQ,GAAG,CAAC,CAAE;IAChDC,MAAM,eAAE5B,OAAA,CAACJ,OAAO;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAI,CAAC;IAAA;IAAAK,QAAA,eAErB7B,OAAA;MAAI8B,SAAS,EAAEhC,KAAK,CAACiC,SAAU;MAAAF,QAAA,EAC5BxB,MAAM,CAAC2B,GAAG,CAAEC,KAAK,iBAChBjC,OAAA,CAACL,SAAS;QAAgBsC,KAAK,EAAEA;MAAM,GAAvBA,KAAK,CAACC,EAAE;QAAAb,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACzB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACU;AAErB;AAACrB,EAAA,CAjDeF,UAAU;AAAAkC,EAAA,GAAVlC,UAAU;AAAA,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}